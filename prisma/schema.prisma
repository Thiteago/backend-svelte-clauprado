// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             Int    @id @default(autoincrement())
    nome           String
    dataNascimento String
    email          String @unique
    senha          String
    cpf            String
    rua            String
    numeroRua      String
    bairro         String
    cidade         String
    cep            String
    numeroTel      String
    numeroCel      String
    cargo          String @default("Usuario")
    status         String @default("Ativo")

    pedidos Pedido[]
}

model Produto {
    id                  Int      @id @default(autoincrement())
    nome                String
    descricao           String
    dataFabricacao      DateTime
    dataPublicacao      DateTime @default(now())
    quantidadeEmEstoque Int      @default(1)
    peso                Float
    valor               Float
    altura              String
    largura             String
    comprimento         String
    material            String
    categoria           String
    imagens             String[]

    Aluguel Aluguel?
    Venda   Venda?
    Pedido  Pedido[]
}

model Aluguel {
    id                   Int       @id @default(autoincrement())
    data_aluguel         DateTime?
    data_disponibilidade DateTime  @default(now())
    data_expiracao       DateTime?
    status_aluguel       String    @default("Disponivel")
    dias_alugados        Int       @default(0)
    tipo                 String    @default("Aluguel")

    produto   Produto @relation(fields: [produtoId], references: [id])
    produtoId Int     @unique
}

model Venda {
    id           Int    @id @default(autoincrement())
    tipo         String @default("Venda")
    status_venda String @default("Disponivel")

    produto   Produto @relation(fields: [produtoId], references: [id])
    produtoId Int     @unique
}

model Pedido {
    id          Int      @id @default(autoincrement())
    data_pedido DateTime @default(now())
    status      String   @default("Pendente")
    valor       Float

    user   User @relation(fields: [userId], references: [id])
    userId Int

    produtos  Produto[]
    Pagamento Pagamento?
}

model Pagamento {
    id              Int       @id @default(autoincrement())
    data_pagamento  DateTime?
    valor           Float
    forma_pagamento String
    status          String    @default("Pendente")

    pedido   Pedido  @relation(fields: [pedidoId], references: [id])
    pedidoId Int     @unique
    boleto   Boleto?
}

model Boleto {
    id             Int      @id @default(autoincrement())
    data_venc      DateTime
    valor          Float
    status         String   @default("Pendente")
    linhaDigitavel String
    numeroBoleto   String
    nomePDF        String

    pagamento   Pagamento @relation(fields: [pagamentoId], references: [id])
    pagamentoId Int       @unique
}
